name: "Go Tests"

on:
  push:
  # Triggers the workflow on labeled PRs only.
  pull_request_target:
    types: [labeled]

# Ensures that only the latest commit is running for each PR at a time.
# Ignores this rule for push events.
concurrency:
  group: ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  Pretest:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Unlabel 'safe to test'
        uses: actions-ecosystem/action-remove-labels@v1
        if: ${{ github.event_name != 'push' }}
        with:
          labels: "safe to test"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache: false

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      # Generate mocks
      - name: Generate mocks
        run: go generate ./...

      - name: Lint
        run: go vet -v ./...

  tests:
    needs: Pretest
    name: ${{ matrix.suite.name }} Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}-latest
    env:
      JFROG_CLI_LOG_LEVEL: "DEBUG"
      GRADLE_OPTS: -Dorg.gradle.daemon=false
    strategy:
      fail-fast: false
      matrix:
        suite:
          - name: 'Unit'

          - name: 'Scan Repository'
            package: 'scanrepository'

          - name: 'Scan Pull Request'
            package: 'scanpullrequest'

          - name: 'Package Handlers'
            package: 'packagehandlers'

        os: [ ubuntu, windows, macos ]
    steps:
      # Configure prerequisites
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache: false

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Setup Python3
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install python components
        run: python -m pip install pipenv poetry

      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.x"

      - name: Install NuGet on Linux
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: 6.11.0
        if: runner.os == 'Linux'
      
      - name: Cache apt packages and lists
        uses: actions/cache@v4
        if: runner.os == 'Linux'
        with:
          # Cache directories for downloaded .deb files and package lists
          path: |
            ${{ github.workspace }}/.cache/apt/archives
            ${{ github.workspace }}/.cache/apt/lists
          # Key for the cache. Change 'v1' to 'v2' to invalidate the cache manually.
          # Using 'ubuntu-focal' ensures this cache is only used on matching runners.
          key: ${{ runner.os }}-apt-mono-focal-v1
          # Fallback key if the exact key is not found (e.g., after changing the version)
          restore-keys: |
            ${{ runner.os }}-apt-mono-focal-
      

      - name: Install Mono on Linux
        if: runner.os == 'Linux'
        shell: 'bash'
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          WS_CACHE_DIR_ARCHIVES="${{ github.workspace }}/.cache/apt/archives"
          WS_CACHE_DIR_LISTS="${{ github.workspace }}/.cache/apt/lists"
          RUNNER_USER=$(whoami)

          echo "Runner user: $RUNNER_USER"
          echo "Workspace Cache Archives: $WS_CACHE_DIR_ARCHIVES"
          echo "Workspace Cache Lists: $WS_CACHE_DIR_LISTS"

          echo "Creating workspace cache directories..."
          mkdir -p "$WS_CACHE_DIR_ARCHIVES/partial"
          mkdir -p "$WS_CACHE_DIR_LISTS/partial"
          # Initially owned by runner:runner

          echo "Configuring apt to use workspace cache directories..."
          sudo mkdir -p /etc/apt/apt.conf.d
          APT_CONF_DIR="/etc/apt/apt.conf.d"
          WS_APT_ARCHIVES_CONF="$APT_CONF_DIR/90github_ws_cache_archives"
          WS_APT_LISTS_CONF="$APT_CONF_DIR/91github_ws_cache_lists"
          WS_APT_LOCKS_CONF="$APT_CONF_DIR/92github_ws_cache_locks"

          echo "Dir::Cache::Archives \"$WS_CACHE_DIR_ARCHIVES\";" | sudo tee "$WS_APT_ARCHIVES_CONF"
          echo "Dir::State::Lists \"$WS_CACHE_DIR_LISTS\";" | sudo tee "$WS_APT_LISTS_CONF"
          # Explicitly set lock file locations within the workspace cache
          echo "Dir::State::Lock \"$WS_CACHE_DIR_LISTS/lock\";" | sudo tee "$WS_APT_LOCKS_CONF"
          echo "Dir::Cache::Lock \"$WS_CACHE_DIR_ARCHIVES/lock\";" | sudo tee -a "$WS_APT_LOCKS_CONF" # Append to the same lock config file
          
          sudo chmod 644 "$WS_APT_ARCHIVES_CONF" "$WS_APT_LISTS_CONF" "$WS_APT_LOCKS_CONF"
          
          echo "Setting ownership of workspace cache directories for apt operations..."
          echo "Verifying _apt user:"
          id _apt || (echo "ERROR: User _apt not found. This is unexpected for an Ubuntu runner." && exit 1)
          
          # Assign ownership to user _apt and its primary group.
          # This user needs full control over these directories during apt updates/installs.
          echo "Assigning ownership to user '_apt' (and its primary group)..."
          sudo chown -R _apt "$WS_CACHE_DIR_LISTS"
          sudo chown -R _apt "$WS_CACHE_DIR_ARCHIVES"

          # Ensure permissions allow _apt (as the new owner) to read/write/execute(for dirs)
          sudo chmod -R u+rwX "$WS_CACHE_DIR_LISTS"
          sudo chmod -R u+rwX "$WS_CACHE_DIR_ARCHIVES"

          echo "Running apt-get update..."
          sudo apt-get update -o APT::Sandbox::User=_apt -o Acquire::Retries=3

          echo "Installing prerequisites: apt-transport-https, dirmngr, gnupg, ca-certificates..."
          sudo apt-get install -y apt-transport-https dirmngr gnupg ca-certificates

          echo "Adding Mono repository key..."
          sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
          echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
          
          echo "Running apt-get update for Mono repository..."
          sudo apt-get update -o APT::Sandbox::User=_apt -o Acquire::Retries=3

          echo "Installing mono-complete..."
          sudo apt-get install -y mono-complete --fix-missing

          echo "Reverting ownership of workspace cache directories to $RUNNER_USER for caching..."
          if [ -d "$WS_CACHE_DIR_ARCHIVES" ]; then
            sudo chown -R $RUNNER_USER:$RUNNER_USER "$WS_CACHE_DIR_ARCHIVES"
          fi
          if [ -d "$WS_CACHE_DIR_LISTS" ]; then
            sudo chown -R $RUNNER_USER:$RUNNER_USER "$WS_CACHE_DIR_LISTS"
          fi

          # Diagnostic: List contents to check for unexpected symlinks to /var/...
          echo "--- Contents of $WS_CACHE_DIR_LISTS ---"
          ls -lAR "$WS_CACHE_DIR_LISTS" || echo "Could not list $WS_CACHE_DIR_LISTS"
          echo "--- Contents of $WS_CACHE_DIR_ARCHIVES ---"
          ls -lAR "$WS_CACHE_DIR_ARCHIVES" || echo "Could not list $WS_CACHE_DIR_ARCHIVES"
          echo "--- Symlinks in $WS_CACHE_DIR_LISTS ---"
          find "$WS_CACHE_DIR_LISTS" -type l -ls || echo "No symlinks found or error listing symlinks in lists."
          echo "--- Symlinks in $WS_CACHE_DIR_ARCHIVES ---"
          find "$WS_CACHE_DIR_ARCHIVES" -type l -ls || echo "No symlinks found or error listing symlinks in archives."
          echo "--- Apt configuration files ---"
          sudo grep -r Dir /etc/apt/apt.conf.d/
          
      - name: Install Pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Install Conan
        run: |
          python -m pip install conan
          conan profile detect

      # Generate mocks
      - name: Generate mocks
        run: go generate ./...

      - name: Run Tests
        if: ${{ matrix.suite.name != 'GitHub Integration' || matrix.os == 'ubuntu' }}
        run: go test github.com/jfrog/frogbot/v2/${{ matrix.suite.package }} -v -race -timeout 50m -cover
        env:
          JF_URL: ${{ secrets.PLATFORM_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.PLATFORM_ADMIN_TOKEN }}

  github-integration:
    name: GitHub Integration Tests
    needs: Pretest
    runs-on: ubuntu-latest
    env:
      JFROG_CLI_LOG_LEVEL: "DEBUG"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache: false

      - name: Run Tests
        run: go test github_test.go integrationutils.go commands.go -v -race -timeout 30m -cover
        env:
          JF_URL: ${{ secrets.PLATFORM_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.PLATFORM_ADMIN_TOKEN }}
          FROGBOT_TESTS_GITHUB_TOKEN: ${{ secrets.FROGBOT_TESTS_GITHUB_TOKEN }}

  azure-integration:
    name: Azure Integration Tests
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    env:
      JFROG_CLI_LOG_LEVEL: "DEBUG"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache: false

      - name: Run Tests
        run: go test azure_test.go integrationutils.go commands.go -v -race -timeout 30m -cover
        env:
          JF_URL: ${{ secrets.PLATFORM_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.PLATFORM_ADMIN_TOKEN }}
          FROGBOT_TESTS_AZURE_TOKEN: ${{ secrets.FROGBOT_TESTS_AZURE_TOKEN }}

  gitlab-integration:
    name: GitLab Integration Tests
    needs: Pretest
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows, macos ]
    env:
      JFROG_CLI_LOG_LEVEL: "DEBUG"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache: false

      - name: Run Tests
        run: go test gitlab_test.go integrationutils.go commands.go -v -race -timeout 30m -cover
        env:
          JF_URL: ${{ secrets.PLATFORM_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.PLATFORM_ADMIN_TOKEN }}
          FROGBOT_TESTS_GITLAB_TOKEN: ${{ secrets.FROGBOT_TESTS_GITLAB_TOKEN }}

  bitbucket-server-integration:
    name: Bitbucket Server Integration Tests
    needs: Pretest
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache: false

      - name: Unzip Preconfigured Bitbucket Home
        run: unzip ${{ github.workspace }}/testdata/resources/bitbucket_server_home.zip -d ${PWD}

      - name: Download Bitbucket Server and Run
        run: |
          bb_script_path="${{ github.workspace }}/testdata/resources/bitbucket_server_run.sh"
          chmod +x $bb_script_path
          sh $bb_script_path

      - name: Run Tests
        env:
          JF_URL: ${{ secrets.PLATFORM_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.PLATFORM_ADMIN_TOKEN }}
          FROGBOT_TESTS_BB_SERVER_TOKEN: ${{ secrets.FROGBOT_TESTS_BB_SERVER_TOKEN }}
          JFROG_CLI_LOG_LEVEL: "DEBUG"
        run: go test -v bitbucket_server_test.go commands.go integrationutils.go
